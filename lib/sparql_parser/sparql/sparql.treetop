#!/usr/bin/env tt
# Author::    Pius Uzamere, The Uyiosa Corporation (http://uyiosa.com/)
# Copyright:: 2008 Pius Uzamere

# This file is part of Sparql.rb.
# 
# Sparql.rb is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Sparql.rb is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with Sparql.rb.  If not, see <http://www.gnu.org/licenses/>.

grammar Sparql
	include Primitives
	include Variables
	include LogicalExpressions
	include Graph
	include Series
	
	# 	'SELECT ?v WHERE { ?v ?p "cat"@en }'

	rule query
	   prologue space query_part:( select_query / construct_query / describe_query / ask_query ) {
		def well_formed?
			true #=> if a node has been identified as a query, it's well-formed by definition.
		end
	}
	end
	
	rule prologue
		base_decl? prefix_decl*
	end
	
	rule base_decl
		'BASE' space iri_ref
	end
	
	rule prefix_decl
		'PREFIX' space pname_ns space iri_ref
	end
	
	rule select_query
	   'SELECT' space (( 'DISTINCT' / 'REDUCED' ) space)? bind:( series_of_variables / '*' ) space (series_of_dataset_clauses space)? where space solution_modifier 
	{
		def query_type
			"SELECT"
		end
		def bindings
		  bind.text_value.split(" ")
		end
		
	}
	end
	
	rule ask_query
		'ASK' space (series_of_dataset_clauses space)? where {
			def query_type
				"ASK"
			end
		}
	end
	
	rule describe_query
		'DESCRIBE' space ( series_of_var_or_irirefs / '*' ) space (series_of_dataset_clauses space)? (where space)? solution_modifier {
			def query_type
				"DESCRIBE"
			end
		}
	end
	
	rule construct_query
		'CONSTRUCT' space construct_template space (dataset_clause space)* (where space) solution_modifier {
			def query_type
				"CONSTRUCT"
			end
		}
	end
	
	rule where
		('WHERE' space)? group_graph_pattern
	end
	
	rule construct_template
		'{' space construct_triples? space '}'
	end
	
	rule construct_triples
		triples_same_subject space ( '.' construct_triples? )?
	end

	rule solution_modifier
		(order_clause space limit_offset_clauses)? / order_clause? / limit_offset_clauses?
	end
	
	rule order_clause
		'ORDER BY' space series_of_order_conditions
	end
	
	rule offset_clause
		'OFFSET' space integer
	end

	rule limit_clause
		'LIMIT' space integer
	end
	
	rule limit_offset_clauses
		( limit_clause space (offset_clause? / offset_clause space limit_clause?) )
	end
	
	rule order_condition
		( ( 'ASC' / 'DESC' ) space bracketted_expression ) / ( constraint / var )
	end
	
	rule constraint
		bracketted_expression / built_in_call / function_call
	end
	
	rule built_in_call
		 'STR' space '(' expression ')' 
		/ 'LANG' space '(' expression ')' 
		/ 'LANGMATCHES' space '(' expression ',' expression ')' 
		/ 'DATATYPE' space '(' expression ')' / 'BOUND' space '(' var ')'
		/ 'sameTerm' '(' expression ',' expression ')'
		/ 'isIRI' space '(' expression ')'
		/ 'isURI' space '(' expression ')'
		/ 'isBLANK' space '(' expression ')'
		/ 'isLITERAL' space '(' expression ')'
		/ regex_expression
	end
	
	rule regex_expression
		'REGEX' space '(' expression ',' expression ( ',' expression )? ')'
	end
	
	rule function_call
		iriref arg_list
	end
	
	rule dataset_clause
		'FROM' space ( default_graph_clause / named_graph_clause )
	end
	
	rule default_graph_clause
		source_selector
	end
	
	rule source_selector
		iriref
	end
	
	rule named_graph_clause
	 	'NAMED' space SourceSelector
	end
	
end
